from django.db import models
from django.conf import settings
# ‚≠êÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ import requests ‡πÄ‡∏õ‡πá‡∏ô line-bot-sdk ‚≠êÔ∏è
from linebot import LineBotApi
from linebot.models import TextMessage
from datetime import datetime

# -------------------------------------------------------------
# 1. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
# -------------------------------------------------------------

class Category(models.Model):
    """
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å, ‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô)
    """
    name = models.CharField(max_length=100, unique=True, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
    description = models.TextField(blank=True, null=True, verbose_name='‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')

    class Meta:
        verbose_name = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
        verbose_name_plural = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'

    def __str__(self):
        return self.name

class MenuItem(models.Model):
    """
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    """
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• Category ‡πÅ‡∏ö‡∏ö One-to-Many
    category = models.ForeignKey(
        Category, 
        on_delete=models.CASCADE, 
        related_name='items',
        verbose_name='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
    )
    name = models.CharField(max_length=200, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£')
    description = models.TextField(verbose_name='‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢')
    price = models.DecimalField(max_digits=6, decimal_places=2, verbose_name='‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)')
    
    # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    is_available = models.BooleanField(default=True, verbose_name='‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢')
    is_special = models.BooleanField(default=False, verbose_name='‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©')
    image = models.ImageField(
        upload_to='menu_images/', 
        blank=True, 
        null=True,
        verbose_name='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
    )

    class Meta:
        verbose_name = '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
        verbose_name_plural = '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
        ordering = ['category', 'name']

    def __str__(self):
        return self.name
    
class GalleryImage(models.Model):
    """
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ
    """
    title = models.CharField(
        max_length=100,
        verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô'
    )
    image = models.ImageField(
        upload_to='gallery_images/', 
        verbose_name='‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ'
    )
    # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    order = models.IntegerField(
        default=0,
        verbose_name='‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•'
    )
    is_visible = models.BooleanField(
        default=True,
        verbose_name='‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö'
    )

    class Meta:
        verbose_name = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ'
        verbose_name_plural = '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ'
        ordering = ['order', 'title']

    def __str__(self):
        return self.title

# -------------------------------------------------------------
# 2. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (Reservation) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô LINE Messaging API
# -------------------------------------------------------------

class Reservation(models.Model):
    """
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE
    """
    # 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    name = models.CharField(max_length=100, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á')
    phone = models.CharField(max_length=15, verbose_name='‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
    email = models.EmailField(blank=True, null=True, verbose_name='‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)')
    
    # 2. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á/‡∏™‡∏±‡πà‡∏á
    date = models.DateField(verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')
    time = models.TimeField(verbose_name='‡πÄ‡∏ß‡∏•‡∏≤')
    
    party_size = models.IntegerField(
        verbose_name='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞)', 
        blank=True, 
        null=True
    ) 
    
    special_requests = models.TextField(blank=True, null=True, verbose_name='‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©')
    
    is_takeaway = models.BooleanField(default=False, verbose_name='‡∏™‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô')
    
    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£ (‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡πÇ‡∏î‡∏¢ Admin)
    TABLE_CHOICES = [(f'T{i}', f'‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {i}') for i in range(1, 16)]
    
    assigned_table = models.CharField(
        max_length=5,
        choices=TABLE_CHOICES,
        null=True, 
        blank=True, 
        unique=False, 
        verbose_name="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£"
    )
    
    # 3. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    is_confirmed = models.BooleanField(default=False, verbose_name='‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
    reserved_at = models.DateTimeField(auto_now_add=True, verbose_name='‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠')

    class Meta:
        verbose_name = '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á/‡∏™‡∏±‡πà‡∏á'
        verbose_name_plural = '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á/‡∏™‡∏±‡πà‡∏á'
        ordering = ['date', 'time']

    def __str__(self):
        type_label = "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô ü•°" if self.is_takeaway else "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ üçΩÔ∏è"
        return f"{type_label} ‡∏Ç‡∏≠‡∏á {self.name} ({self.date.strftime('%d/%m/%Y')} {self.time.strftime('%H:%M')})"

    def send_line_notification(self, message):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Official Account (Messaging API)"""
        
        # ‚≠êÔ∏è ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å settings.py ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ß‡πâ ‚≠êÔ∏è
        token = settings.LINE_CHANNEL_ACCESS_TOKEN
        target_id = settings.LINE_NOTIFICATION_TARGET_ID
        
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ placeholder ‡∏à‡∏≤‡∏Å settings.py ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤
        if token and target_id and token != 'YOUR_LONG_LIVED_CHANNEL_ACCESS_TOKEN_HERE':
            try:
                # 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LINE BOT API
                line_bot_api = LineBotApi(token)
                
                # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                line_message = TextMessage(text=message)
                
                # 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (User ID ‡∏´‡∏£‡∏∑‡∏≠ Group ID)
                line_bot_api.push_message(target_id, line_message)
                
            except Exception as e:
                # ‡πÉ‡∏ô Production ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏ä‡πà‡∏ô logging.error(f"LINE API Error: {e}")
                pass


    def save(self, *args, **kwargs):
        is_new = self.pk is None  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        super().save(*args, **kwargs) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        
        # ‚≠êÔ∏è ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚≠êÔ∏è
        if is_new:
            type_label = "‡∏™‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô ü•°" if self.is_takeaway else "‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ üçΩÔ∏è"
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            message = (
                f"\nüîî {type_label} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà!"
                f"\n----------------------------------------"
                f"\nüë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {self.name}"
                f"\nüìû ‡πÇ‡∏ó‡∏£: {self.phone}"
                f"\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {self.date.strftime('%d/%m/%Y')}"
                f"\n‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: {self.time.strftime('%H:%M ‡∏ô.')}"
            )
            
            if not self.is_takeaway:
                message += f"\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {self.party_size} ‡∏ó‡πà‡∏≤‡∏ô"
            
            if self.special_requests:
                message += f"\nüìù ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©: {self.special_requests}"
                
            message += (
                f"\n----------------------------------------"
                f"\nüîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: http://127.0.0.1:8000/admin/menu/reservation/{self.pk}/change/"
            )
            
            # ‚≠êÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ‚≠êÔ∏è
            self.send_line_notification(message)


# -------------------------------------------------------------
# 3. ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞ (Table Status) (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
# -------------------------------------------------------------

class Table(models.Model):
    # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    STATUS_CHOICES = [
        ('A', '‡∏ß‡πà‡∏≤‡∏á (Available)'),
        ('O', '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á (Occupied)'),
        ('R', '‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (Reserved)'),
        ('C', '‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (Closed)'),
    ]
    
    # ‡πÇ‡∏ï‡πä‡∏∞ 1-15 
    TABLE_CHOICES = [(f'T{i}', f'‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà {i}') for i in range(1, 16)]
    
    table_number = models.CharField(
        max_length=5,
        choices=TABLE_CHOICES,
        unique=True,
        verbose_name='‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ï‡πä‡∏∞'
    )
    capacity = models.IntegerField(
        default=4,
        verbose_name='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏Ñ‡∏ô)'
    )
    current_status = models.CharField(
        max_length=1,
        choices=STATUS_CHOICES,
        default='A',
        verbose_name='‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
    )
    
    last_updated = models.DateTimeField(
        auto_now=True, 
        verbose_name='‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
    )

    class Meta:
        verbose_name = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞'
        verbose_name_plural = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞'
        ordering = ['table_number']

    def __str__(self):
        return f"{self.table_number} ({self.get_current_status_display()})"